<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="assets/img/favicon.png" rel="icon">
  <title>Atacko's Desktop</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link rel="stylesheet" href="assets/css/style.css">
</head>

<body>
  <!-- Taskbar -->
  <div class="taskbar d-flex justify-content-between align-items-center fixed-bottom">
    <div class="taskbar-left d-flex align-items-center">
      <button class="start-btn btn p-0" data-bs-toggle="collapse" data-bs-target="#startMenu">
        <img src="assets/img/startbutton.png" alt="Start Button" class="start-icon">
      </button>
      <div class="taskbar-icons d-flex align-items-center">
        <a href="https://x.com/AGoatFromHell" target="_blank">
          <i class="fab fa-twitter"></i>
        </a>
        <a href="https://t.me/Atacko" target="_blank">
          <i class="fab fa-telegram"></i>
        </a>
        <a href="https://discordapp.com/users/344876495258255364" target="_blank">
          <i class="fab fa-discord"></i>
        </a>
        <a href="https://www.instagram.com/atacko_?igsh=ZnQyY2Rhc2Z2bTh2&utm_source=qr" target="_blank">
          <i class="fab fa-instagram"></i>
        </a>
        <a href="https://www.youtube.com/@Atacko" target="_blank">
          <i class="fab fa-youtube"></i>
        </a>
      </div>
    </div>
    <div class="system-tray d-flex align-items-center">
      <i class="fas fa-wifi"></i>
      <i class="fas fa-volume-up"></i>
      <span id="time" class="time"></span>
    </div>
  </div>

  <!-- Window Container -->
  <div id="windows-container">
    <!-- Windows will be dynamically added here -->
  </div>

  <!-- Desktop Icons -->
  <div id="desktop-icons">
    <div class="desktop-icon" data-url="mobilel.html" target="_blank">
      <img src="assets/img/pfp.jpg" alt="Icon 6">
      <p>Simplified view for mobile users</p>
    </div>
    <div class="desktop-icon" data-url="radio/index.html" target="_blank">
      <img src="assets/img/radio.png" alt="Icon 7">
      <p>Radio</p>
    </div>
    <div class="desktop-icon" data-window="window1" data-url="beamng-mods.html">
      <img src="assets/img/beamngicon.png" alt="Icon 1">
      <p>BeamNG Mods</p>
    </div>
    <div class="desktop-icon" data-window="window2" data-url="github.html">
      <img src="assets/img/githubicon.png" alt="Icon 2">
      <p>GitHub</p>
    </div>
    <div class="desktop-icon" data-window="window3" data-url="steam-accounts.html">
      <img src="assets/img/steamicon.png" alt="Icon 3">
      <p>Steam Accounts</p>
    </div>
    <div class="desktop-icon" data-window="window4" data-url="content.html">
      <img src="assets/img/youtubeicon.png" alt="Icon 4">
      <p>Content</p>
    </div>
    </div>
    
  </div>
  </div>

  <!-- Include Bootstrap JS (required for collapse and other interactive elements) -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

  <script src="script.js"></script>
</body>

</html>

// Minimum dimensions
const MIN_WIDTH = 280;
const MIN_HEIGHT = 220;
let highestZIndex = 10; // Start with a base z-index value

// Throttle function for performance optimization
function throttle(fn, limit) {
  let inThrottle;
  return function(...args) {
    if (!inThrottle) {
      fn.apply(this, args);
      inThrottle = true;
      setTimeout(() => (inThrottle = false), limit);
    }
  };
}

// Function to center a window
function centerWindow(win) {
  const winWidth = win.offsetWidth;
  const winHeight = win.offsetHeight;
  const container = document.getElementById('windows-container');
  const containerWidth = container.offsetWidth;
  const containerHeight = container.offsetHeight;

  win.style.left = (containerWidth / 2 - winWidth / 2) + 'px';
  win.style.top = (containerHeight / 2 - winHeight / 2) + 'px';
}

// Function to bring the window to the front
function bringWindowToFront(win) {
  highestZIndex++;
  win.style.zIndex = highestZIndex;
}

// Function to create a new window with a specific title and URL
function createWindow(id, title, url) {
  // Check if the window with this ID already exists
  if (document.getElementById(id)) {
    const existingWindow = document.getElementById(id);
    bringWindowToFront(existingWindow); // Bring the existing window to the front
    return;
  }

  const windowDiv = document.createElement('div');
  windowDiv.classList.add('window');
  windowDiv.id = id; // Assign a unique id based on the icon clicked
  windowDiv.style.zIndex = ++highestZIndex; // Set z-index and increment

  // Calculate dimensions as 50% of the container's width and height
  const container = document.getElementById('windows-container');
  const containerWidth = container.offsetWidth;
  const containerHeight = container.offsetHeight;
  const defaultWidth = containerWidth * 0.5; // 50% of the container's width
  const defaultHeight = containerHeight * 0.5; // 50% of the container's height

  windowDiv.style.width = `${defaultWidth}px`;
  windowDiv.style.height = `${defaultHeight}px`;

  windowDiv.innerHTML = `
    <div class="window-header">
      <span>${title}</span>
      <button class="close-btn">X</button>
    </div>
    <div class="window-content">
      <iframe src="${url}" style="width: 100%; height: 100%; border: none;"></iframe>
    </div>
    <div class="resize-handle"></div>
  `;
  document.getElementById('windows-container').appendChild(windowDiv);

  // Center the new window
  centerWindow(windowDiv);

  // Add event listeners for the new window
  addWindowEvents(windowDiv);
}

// Function to add event listeners for a window, supporting both mouse and touch events
function addWindowEvents(win) {
  const header = win.querySelector('.window-header');
  const resizeHandle = win.querySelector('.resize-handle');
  const iframe = win.querySelector('iframe');

  // Bring window to front when clicked
  win.addEventListener('mousedown', () => bringWindowToFront(win));
  win.addEventListener('touchstart', () => bringWindowToFront(win));

  // Handle drag (mouse + touch)
  if (header) {
    header.addEventListener('mousedown', startDrag);
    header.addEventListener('touchstart', startDrag, { passive: false });
  }

  function startDrag(e) {
    e.preventDefault();
    const rect = win.getBoundingClientRect();
    const offsetX = (e.touches ? e.touches[0].clientX : e.clientX) - rect.left;
    const offsetY = (e.touches ? e.touches[0].clientY : e.clientY) - rect.top;

    // Disable pointer events for iframe while dragging
    if (iframe) {
      iframe.style.pointerEvents = 'none';
    }

    const moveFn = throttle((e) => {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const clientY = e.touches ? e.touches[0].clientY : e.clientY;
      win.style.left = clientX - offsetX + 'px';
      win.style.top = clientY - offsetY + 'px';
    }, 10);

    function onMouseUp() {
      document.removeEventListener('mousemove', moveFn);
      document.removeEventListener('mouseup', onMouseUp);
      document.removeEventListener('touchmove', moveFn);
      document.removeEventListener('touchend', onMouseUp);

      // Re-enable pointer events for iframe after dragging
      if (iframe) {
        iframe.style.pointerEvents = 'auto';
      }
    }

    document.addEventListener('mousemove', moveFn);
    document.addEventListener('mouseup', onMouseUp);
    document.addEventListener('touchmove', moveFn);
    document.addEventListener('touchend', onMouseUp);
  }

  // Handle resize (mouse + touch)
  if (resizeHandle) {
    resizeHandle.addEventListener('mousedown', startResize);
    resizeHandle.addEventListener('touchstart', startResize, { passive: false });
  }

  function startResize(e) {
    e.preventDefault();
    const startX = e.touches ? e.touches[0].clientX : e.clientX;
    const startY = e.touches ? e.touches[0].clientY : e.clientY;
    const startWidth = win.offsetWidth;
    const startHeight = win.offsetHeight;

    // Disable pointer events for iframe while resizing
    if (iframe) {
      iframe.style.pointerEvents = 'none';
    }

    const resizeFn = throttle((e) => {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const clientY = e.touches ? e.touches[0].clientY : e.clientY;
      let newWidth = startWidth + (clientX - startX);
      let newHeight = startHeight + (clientY - startY);

      newWidth = Math.max(newWidth, MIN_WIDTH);
      newHeight = Math.max(newHeight, MIN_HEIGHT);

      win.style.width = `${newWidth}px`;
      win.style.height = `${newHeight}px`;
    }, 10);

    function onMouseUp() {
      document.removeEventListener('mousemove', resizeFn);
      document.removeEventListener('mouseup', onMouseUp);
      document.removeEventListener('touchmove', resizeFn);
      document.removeEventListener('touchend', onMouseUp);

      // Re-enable pointer events for iframe after resizing
      if (iframe) {
        iframe.style.pointerEvents = 'auto';
      }
    }

    document.addEventListener('mousemove', resizeFn);
    document.addEventListener('mouseup', onMouseUp);
    document.addEventListener('touchmove', resizeFn);
    document.addEventListener('touchend', onMouseUp);
  }

  // Close button functionality
  const closeButton = win.querySelector('.close-btn');
  if (closeButton) {
    closeButton.addEventListener('click', function() {
      win.remove();
    });
  }
}

// Ensure script runs after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  // Initialize desktop icons
  document.querySelectorAll('.desktop-icon').forEach(icon => {
    icon.addEventListener('click', function() {
      const url = this.getAttribute('data-url');
      const isNewTab = this.getAttribute('target') === '_blank';

      if (isNewTab) {
        window.open(url, '_blank');
      } else {
        const windowTitle = this.querySelector('p').textContent; // Get the icon's text
        const windowId = `window-${windowTitle.toLowerCase().replace(/\s+/g, '-')}`; // Create a unique id for each window

        createWindow(windowId, windowTitle, url);
      }
    });
  });

  const musicButton = document.querySelector('.taskbar-icons .fa-music');
  if (musicButton) {
    musicButton.addEventListener('click', function(event) {
      event.preventDefault(); 
      const windowId = 'window-music'; 
      const windowTitle = 'Music'; 
      const windowUrl = 'music.html'; 

      createWindow(windowId, windowTitle, windowUrl);
    });
  }

  // Update time
  function updateTime() {
    const timeElement = document.getElementById('time');
    if (timeElement) { // Check if the element exists
      const now = new Date();
      const hours = now.getHours();
      const minutes = now.getMinutes();
      const period = hours >= 12 ? 'PM' : 'AM';
      const formattedHours = hours % 12 || 12;
      const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;
      
      timeElement.textContent = `${formattedHours}:${formattedMinutes} ${period}`;
    }
  }

  setInterval(updateTime, 1000); // Update every second
  updateTime(); // Call immediately to set initial time
});


@font-face {
    font-family: 'DisposableDroid';
    src: url('../fonts/Disposabledroidbb-y3qM.otf');
}

:root {
    --default-font: "DisposableDroid", sans-serif;
    --heading-font: "DisposableDroid", sans-serif;
    --nav-font: "DisposableDroid", sans-serif;
}

/* Disable selection for specific elements */
.desktop-icon,
.taskbar,
.window {
    user-select: none;
}

/* General styles */
body, html {
    font-family: var(--default-font);
    margin: 0;
    padding: 0;
    overflow: hidden; /* Prevent any scrollbars on the page */
    background: url('../img/wallpaper.jpg') no-repeat center center fixed;
    background-size: cover;
}

/* Taskbar styles */
.taskbar {
    background-color: #1e1e1e;
    height: 50px;
    padding: 0 15px;
    box-shadow: 0 -1px 5px rgba(0, 0, 0, 0.5);
    color: white;
    z-index: 1000;
    border-top: 2px solid rgba(255, 255, 255, 0.2);
}

.start-btn {
    border: none;
    background: none;
    padding: 0;
    outline: none;
    transition: transform 0.1s ease, box-shadow 0.1s ease;
}

.start-btn:active {
    transform: scale(0.95); /* Shrink slightly */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3); /* Add a shadow effect when pressed */
}

.start-icon {
    height: 45px; /* Set height for the start button */
    width: 45px;  /* Set width for the start button */
    margin-right: 15px;
}

.taskbar-icons i {
    font-size: 22px;
    margin-right: 20px;
    cursor: pointer;
    color: crimson;
    transition: transform 0.3s ease-in-out;
}

.taskbar-icons i:hover {
    transform: scale(1.3);
}

/* Remove underline from anchor tags within the taskbar icons */
.taskbar-icons a {
    text-decoration: none; 
    display: flex;
    align-items: center;
    margin: 0;
    padding: 0;
    line-height: 0; 
}

.system-tray i {
    margin-right: 15px;
    font-size: 18px;
}

.time {
    font-size: 14px;
}

/* Desktop Icons */
#desktop-icons {
    position: absolute;
    top: 20px; /* Space from the top */
    left: 20px; /* Space from the left */
    width: calc(100% - 20px); /* Full width minus the left space */
    height: calc(100vh - 70px); /* Full height minus the top space and taskbar height */
    display: flex;
    flex-direction: column;
    gap: 10px;
    z-index: 1;
    overflow: hidden; /* Ensure no scrollbars appear */
}

.desktop-icon {
    width: 64px;
    text-align: center;
    cursor: pointer;
}

.desktop-icon img {
    width: 64px;
    height: 64px;
    object-fit: contain;
}

.desktop-icon p {
    margin: 5px 0 0;
    font-size: 12px;
    color: #fff;
}

/* Window Container */
#windows-container {
    position: relative;
    width: 100%;
    height: calc(100vh - 50px);
    padding: 10px;
    box-sizing: border-box;
}

/* Window styles */
.window {
    position: absolute;
    width: 300px;
    height: 200px;
    background: #000000;
    border: 1px solid #ccc;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    overflow: hidden;
    z-index: 10;
    will-change: transform;
}

.window-header {
    background: #630000;
    color: #fff;
    padding: 5px;
    cursor: move;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.window-header span {
    font-weight: bold;
}

.close-btn {
    background: transparent;
    border: none;
    color: #fff;
    font-size: 16px;
    cursor: pointer;
}

.window-content {
    padding: 10px;
    height: calc(100% - 40px);
    overflow: hidden;
}

.resize-handle {
    position: absolute;
    bottom: 0;
    right: 0;
    width: 20px;
    height: 20px;
    background: #630000;
    cursor: nwse-resize;
}

/* Loading text */
.loading-text p {
    color: crimson;
}

/* Make desktop icons and windows more mobile-friendly */
@media (max-width: 768px) {
    #desktop-icons {
        width: 100%; /* Full width for mobile */
        gap: 20px;
    }
    
    .desktop-icon {
        width: 48px;
    }
    
    .desktop-icon img {
        width: 48px;
        height: 48px;
    }

    .desktop-icon p {
        font-size: 10px;
    }

    .window {
        width: 80vw; /* Use a percentage of the screen for window width */
        height: 40vh; /* Adjust window height */
    }

    .window-header {
        padding: 10px;
    }
}
